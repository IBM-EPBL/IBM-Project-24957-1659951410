{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs48\lang9 ASSIGNMENT 3\par
\fs22\par
\{\par
  "nbformat": 4,\par
  "nbformat_minor": 0,\par
  "metadata": \{\par
    "colab": \{\par
      "provenance": [],\par
      "collapsed_sections": []\par
    \},\par
    "kernelspec": \{\par
      "name": "python3",\par
      "display_name": "Python 3"\par
    \},\par
    "language_info": \{\par
      "name": "python"\par
    \}\par
  \},\par
  "cells": [\par
    \{\par
      "cell_type": "markdown",\par
      "source": [\par
        "# **Assignment 3**"\par
      ],\par
      "metadata": \{\par
        "id": "j8bF22iNxMDx"\par
      \}\par
    \},\par
    \{\par
      "cell_type": "markdown",\par
      "source": [\par
        "# **CNN MODEL FOR FLOWER CLASSIFICATION**\\n",\par
        "# **Trained by Team ID : PNT2022TMID17050**"\par
      ],\par
      "metadata": \{\par
        "id": "BdPpvl8Q0IlY"\par
      \}\par
    \},\par
    \{\par
      "cell_type": "markdown",\par
      "source": [\par
        "# **Pre-Requisites**"\par
      ],\par
      "metadata": \{\par
        "id": "d5mO5lxMq9BQ"\par
      \}\par
    \},\par
    \{\par
      "cell_type": "code",\par
      "execution_count": 1,\par
      "metadata": \{\par
        "colab": \{\par
          "base_uri": "{{\field{\*\fldinst{HYPERLINK https://localhost:8080/ }}{\fldrslt{https://localhost:8080/\ul0\cf0}}}}\f0\fs22 "\par
        \},\par
        "id": "h4I4dfJ6p3kx",\par
        "outputId": "5605b9f7-ebc0-4587-88c6-268194f1335d"\par
      \},\par
      "outputs": [\par
        \{\par
          "output_type": "stream",\par
          "name": "stdout",\par
          "text": [\par
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\\"/content/drive\\", force_remount=True).\\n"\par
          ]\par
        \}\par
      ],\par
      "source": [\par
        "from google.colab import drive\\n",\par
        "drive.mount('/content/drive')"\par
      ]\par
    \},\par
    \{\par
      "cell_type": "markdown",\par
      "source": [\par
        "# **STEP 1 UNZIP FILES**"\par
      ],\par
      "metadata": \{\par
        "id": "B4Kss5zOrXUz"\par
      \}\par
    \},\par
    \{\par
      "cell_type": "code",\par
      "source": [\par
        "cd/content/drive/MyDrive/AI_IBM"\par
      ],\par
      "metadata": \{\par
        "colab": \{\par
          "base_uri": "{{\field{\*\fldinst{HYPERLINK https://localhost:8080/ }}{\fldrslt{https://localhost:8080/\ul0\cf0}}}}\f0\fs22 "\par
        \},\par
        "id": "DRNhAxfvrWKc",\par
        "outputId": "f1a087a8-6f33-4d81-ff79-e50f4c1ff623"\par
      \},\par
      "execution_count": 2,\par
      "outputs": [\par
        \{\par
          "output_type": "stream",\par
          "name": "stdout",\par
          "text": [\par
            "/content/drive/MyDrive/AI_IBM\\n"\par
          ]\par
        \}\par
      ]\par
    \},\par
    \{\par
      "cell_type": "code",\par
      "source": [\par
        "!unzip Flowers-Dataset.zip"\par
      ],\par
      "metadata": \{\par
        "colab": \{\par
          "base_uri": "{{\field{\*\fldinst{HYPERLINK https://localhost:8080/ }}{\fldrslt{https://localhost:8080/\ul0\cf0}}}}\f0\fs22 "\par
        \},\par
        "id": "B_hJ27NKrhKz",\par
        "outputId": "9b319781-61d1-4a0e-ea93-f279d067bfc7"\par
      \},\par
      "execution_count": 3,\par
      "outputs": [\par
        \{\par
          "output_type": "stream",\par
          "name": "stdout",\par
          "text": [\par
            "Archive:  Flowers-Dataset.zip\\n",\par
            "replace flowers/daisy/100080576_f52e8ee070_n.jpg? [y]es, [n]o, [A]ll, [N]one, [r]ename: N\\n"\par
          ]\par
        \}\par
      ]\par
    \},\par
    \{\par
      "cell_type": "markdown",\par
      "source": [\par
        "# **STEP 2 Image** **Augumentation**"\par
      ],\par
      "metadata": \{\par
        "id": "hvG8h70rrphq"\par
      \}\par
    \},\par
    \{\par
      "cell_type": "code",\par
      "source": [\par
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator"\par
      ],\par
      "metadata": \{\par
        "id": "itQt2Ad8rtk8"\par
      \},\par
      "execution_count": 4,\par
      "outputs": []\par
    \},\par
    \{\par
      "cell_type": "code",\par
      "source": [\par
        "train_datagen=ImageDataGenerator(rescale=1./255, zoom_range=0.2,horizontal_flip=True,vertical_flip=False)"\par
      ],\par
      "metadata": \{\par
        "id": "9yZUiTxnr0UN"\par
      \},\par
      "execution_count": 5,\par
      "outputs": []\par
    \},\par
    \{\par
      "cell_type": "code",\par
      "source": [\par
        "test_datagen=ImageDataGenerator(rescale=1./255)"\par
      ],\par
      "metadata": \{\par
        "id": "zD7ristVr3F3"\par
      \},\par
      "execution_count": 6,\par
      "outputs": []\par
    \},\par
    \{\par
      "cell_type": "code",\par
      "source": [\par
        "x_train=train_datagen.flow_from_directory(r\\"/content/drive/MyDrive/AI_IBM/flowers\\",target_size=(64,64),class_mode='categorical',batch_size=24)"\par
      ],\par
      "metadata": \{\par
        "colab": \{\par
          "base_uri": "{{\field{\*\fldinst{HYPERLINK https://localhost:8080/ }}{\fldrslt{https://localhost:8080/\ul0\cf0}}}}\f0\fs22 "\par
        \},\par
        "id": "BjQo5zGHuHN4",\par
        "outputId": "d3d1e296-e74d-4e52-cce8-8d26459d10f1"\par
      \},\par
      "execution_count": 7,\par
      "outputs": [\par
        \{\par
          "output_type": "stream",\par
          "name": "stdout",\par
          "text": [\par
            "Found 4317 images belonging to 5 classes.\\n"\par
          ]\par
        \}\par
      ]\par
    \},\par
    \{\par
      "cell_type": "code",\par
      "source": [\par
        "x_test=test_datagen.flow_from_directory(r\\"/content/drive/MyDrive/AI_IBM/flowers\\",target_size=(64,64),class_mode='categorical',batch_size=24)"\par
      ],\par
      "metadata": \{\par
        "colab": \{\par
          "base_uri": "{{\field{\*\fldinst{HYPERLINK https://localhost:8080/ }}{\fldrslt{https://localhost:8080/\ul0\cf0}}}}\f0\fs22 "\par
        \},\par
        "id": "e4YJwWrCukDq",\par
        "outputId": "e71a3e44-6642-4592-fa96-7af9c6edb08f"\par
      \},\par
      "execution_count": 8,\par
      "outputs": [\par
        \{\par
          "output_type": "stream",\par
          "name": "stdout",\par
          "text": [\par
            "Found 4317 images belonging to 5 classes.\\n"\par
          ]\par
        \}\par
      ]\par
    \},\par
    \{\par
      "cell_type": "code",\par
      "source": [\par
        "x_train.class_indices"\par
      ],\par
      "metadata": \{\par
        "colab": \{\par
          "base_uri": "{{\field{\*\fldinst{HYPERLINK https://localhost:8080/ }}{\fldrslt{https://localhost:8080/\ul0\cf0}}}}\f0\fs22 "\par
        \},\par
        "id": "EgBhHHYTuv4X",\par
        "outputId": "8a9f62e0-7d2b-4138-c5ce-4ca16b78fbd1"\par
      \},\par
      "execution_count": 9,\par
      "outputs": [\par
        \{\par
          "output_type": "execute_result",\par
          "data": \{\par
            "text/plain": [\par
              "\{'daisy': 0, 'dandelion': 1, 'rose': 2, 'sunflower': 3, 'tulip': 4\}"\par
            ]\par
          \},\par
          "metadata": \{\},\par
          "execution_count": 9\par
        \}\par
      ]\par
    \},\par
    \{\par
      "cell_type": "markdown",\par
      "source": [\par
        "# **Step -3 Initializing CNN And Create Model**"\par
      ],\par
      "metadata": \{\par
        "id": "O5cz-9qOJM_s"\par
      \}\par
    \},\par
    \{\par
      "cell_type": "code",\par
      "source": [\par
        "from tensorflow.keras.models import Sequential\\n",\par
        "from tensorflow.keras.layers import Dense,Convolution2D,MaxPooling2D,Flatten"\par
      ],\par
      "metadata": \{\par
        "id": "QAUHi2otRcoC"\par
      \},\par
      "execution_count": 10,\par
      "outputs": []\par
    \},\par
    \{\par
      "cell_type": "markdown",\par
      "source": [\par
        "# **Step -4 Add layers**"\par
      ],\par
      "metadata": \{\par
        "id": "xew7skua3a0z"\par
      \}\par
    \},\par
    \{\par
      "cell_type": "code",\par
      "source": [\par
        "model=Sequential()"\par
      ],\par
      "metadata": \{\par
        "id": "dack9NXYR2t6"\par
      \},\par
      "execution_count": 11,\par
      "outputs": []\par
    \},\par
    \{\par
      "cell_type": "markdown",\par
      "source": [\par
        "# **4.1 Input Layers (Convolution ,MaxPooling,Flatten)**"\par
      ],\par
      "metadata": \{\par
        "id": "SzIvL8Q52DFR"\par
      \}\par
    \},\par
    \{\par
      "cell_type": "code",\par
      "source": [\par
        "model.add(Convolution2D(32,(3,3),input_shape=(64,64,3),activation='relu'))"\par
      ],\par
      "metadata": \{\par
        "id": "qPUbKxHGR7EX"\par
      \},\par
      "execution_count": 12,\par
      "outputs": []\par
    \},\par
    \{\par
      "cell_type": "code",\par
      "source": [\par
        "model.add(MaxPooling2D(pool_size=(2,2)))"\par
      ],\par
      "metadata": \{\par
        "id": "IBGMZ7sSSAIB"\par
      \},\par
      "execution_count": 13,\par
      "outputs": []\par
    \},\par
    \{\par
      "cell_type": "code",\par
      "source": [\par
        "model.add(Flatten())"\par
      ],\par
      "metadata": \{\par
        "id": "c65fXm9KSErL"\par
      \},\par
      "execution_count": 14,\par
      "outputs": []\par
    \},\par
    \{\par
      "cell_type": "code",\par
      "source": [\par
        "model.summary()"\par
      ],\par
      "metadata": \{\par
        "colab": \{\par
          "base_uri": "{{\field{\*\fldinst{HYPERLINK https://localhost:8080/ }}{\fldrslt{https://localhost:8080/\ul0\cf0}}}}\f0\fs22 "\par
        \},\par
        "id": "-go5E-VbSIau",\par
        "outputId": "1f46f35d-1950-4456-bce9-16a06053d40f"\par
      \},\par
      "execution_count": 15,\par
      "outputs": [\par
        \{\par
          "output_type": "stream",\par
          "name": "stdout",\par
          "text": [\par
            "Model: \\"sequential\\"\\n",\par
            "_________________________________________________________________\\n",\par
            " Layer (type)                Output Shape              Param #   \\n",\par
            "=================================================================\\n",\par
            " conv2d (Conv2D)             (None, 62, 62, 32)        896       \\n",\par
            "                                                                 \\n",\par
            " max_pooling2d (MaxPooling2D  (None, 31, 31, 32)       0         \\n",\par
            " )                                                               \\n",\par
            "                                                                 \\n",\par
            " flatten (Flatten)           (None, 30752)             0         \\n",\par
            "                                                                 \\n",\par
            "=================================================================\\n",\par
            "Total params: 896\\n",\par
            "Trainable params: 896\\n",\par
            "Non-trainable params: 0\\n",\par
            "_________________________________________________________________\\n"\par
          ]\par
        \}\par
      ]\par
    \},\par
    \{\par
      "cell_type": "markdown",\par
      "source": [\par
        "# **4.2 Hidden Layers**"\par
      ],\par
      "metadata": \{\par
        "id": "f4ZSQPIFJaeb"\par
      \}\par
    \},\par
    \{\par
      "cell_type": "code",\par
      "source": [\par
        "model.add(Dense(300,activation='relu'))\\n",\par
        "model.add(Dense(150,activation='relu'))"\par
      ],\par
      "metadata": \{\par
        "id": "x8MIUG1PSZ21"\par
      \},\par
      "execution_count": 16,\par
      "outputs": []\par
    \},\par
    \{\par
      "cell_type": "markdown",\par
      "source": [\par
        "# **4.3 Output Layers**"\par
      ],\par
      "metadata": \{\par
        "id": "PNLk8KHHJf3K"\par
      \}\par
    \},\par
    \{\par
      "cell_type": "code",\par
      "source": [\par
        "model.add(Dense(5,activation='softmax'))"\par
      ],\par
      "metadata": \{\par
        "id": "grI0IbuwSeqO"\par
      \},\par
      "execution_count": 17,\par
      "outputs": []\par
    \},\par
    \{\par
      "cell_type": "code",\par
      "source": [\par
        "model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])"\par
      ],\par
      "metadata": \{\par
        "id": "l44vMW4QShaw"\par
      \},\par
      "execution_count": 18,\par
      "outputs": []\par
    \},\par
    \{\par
      "cell_type": "code",\par
      "source": [\par
        "len(x_train)"\par
      ],\par
      "metadata": \{\par
        "colab": \{\par
          "base_uri": "{{\field{\*\fldinst{HYPERLINK https://localhost:8080/ }}{\fldrslt{https://localhost:8080/\ul0\cf0}}}}\f0\fs22 "\par
        \},\par
        "id": "Beiar4NESkL4",\par
        "outputId": "4b264b09-51b5-4786-b2a8-d60ac129229d"\par
      \},\par
      "execution_count": 19,\par
      "outputs": [\par
        \{\par
          "output_type": "execute_result",\par
          "data": \{\par
            "text/plain": [\par
              "180"\par
            ]\par
          \},\par
          "metadata": \{\},\par
          "execution_count": 19\par
        \}\par
      ]\par
    \},\par
    \{\par
      "cell_type": "markdown",\par
      "source": [\par
        "# **Step -5 Train the Model**"\par
      ],\par
      "metadata": \{\par
        "id": "Y9f3ElSv3Nc6"\par
      \}\par
    \},\par
    \{\par
      "cell_type": "code",\par
      "source": [\par
        "model.fit_generator(x_train,steps_per_epoch=len(x_train), validation_data=x_test, validation_steps=len(x_test), epochs= 30)"\par
      ],\par
      "metadata": \{\par
        "colab": \{\par
          "base_uri": "{{\field{\*\fldinst{HYPERLINK https://localhost:8080/ }}{\fldrslt{https://localhost:8080/\ul0\cf0}}}}\f0\fs22 "\par
        \},\par
        "id": "ATt0m5Cv6R-w",\par
        "outputId": "734d2b05-c864-450f-a46f-8ce129904306"\par
      \},\par
      "execution_count": 20,\par
      "outputs": [\par
        \{\par
          "output_type": "stream",\par
          "name": "stderr",\par
          "text": [\par
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\\n",\par
            "  \\"\\"\\"Entry point for launching an IPython kernel.\\n"\par
          ]\par
        \},\par
        \{\par
          "output_type": "stream",\par
          "name": "stdout",\par
          "text": [\par
            "Epoch 1/30\\n",\par
            "180/180 [==============================] - 393s 2s/step - loss: 1.3213 - accuracy: 0.4714 - val_loss: 1.1275 - val_accuracy: 0.5532\\n",\par
            "Epoch 2/30\\n",\par
            "180/180 [==============================] - 74s 409ms/step - loss: 1.0600 - accuracy: 0.5854 - val_loss: 0.9406 - val_accuracy: 0.6301\\n",\par
            "Epoch 3/30\\n",\par
            "180/180 [==============================] - 73s 405ms/step - loss: 0.9678 - accuracy: 0.6247 - val_loss: 0.9603 - val_accuracy: 0.6203\\n",\par
            "Epoch 4/30\\n",\par
            "180/180 [==============================] - 77s 429ms/step - loss: 0.8884 - accuracy: 0.6546 - val_loss: 0.8187 - val_accuracy: 0.6938\\n",\par
            "Epoch 5/30\\n",\par
            "180/180 [==============================] - 76s 422ms/step - loss: 0.8358 - accuracy: 0.6787 - val_loss: 0.7393 - val_accuracy: 0.7225\\n",\par
            "Epoch 6/30\\n",\par
            "180/180 [==============================] - 75s 418ms/step - loss: 0.7924 - accuracy: 0.6965 - val_loss: 0.8389 - val_accuracy: 0.6928\\n",\par
            "Epoch 7/30\\n",\par
            "180/180 [==============================] - 73s 405ms/step - loss: 0.7521 - accuracy: 0.7158 - val_loss: 0.8503 - val_accuracy: 0.6789\\n",\par
            "Epoch 8/30\\n",\par
            "180/180 [==============================] - 74s 411ms/step - loss: 0.7048 - accuracy: 0.7313 - val_loss: 0.6492 - val_accuracy: 0.7521\\n",\par
            "Epoch 9/30\\n",\par
            "180/180 [==============================] - 72s 400ms/step - loss: 0.6502 - accuracy: 0.7521 - val_loss: 0.6458 - val_accuracy: 0.7438\\n",\par
            "Epoch 10/30\\n",\par
            "180/180 [==============================] - 74s 409ms/step - loss: 0.6182 - accuracy: 0.7684 - val_loss: 0.5721 - val_accuracy: 0.7818\\n",\par
            "Epoch 11/30\\n",\par
            "180/180 [==============================] - 72s 402ms/step - loss: 0.5662 - accuracy: 0.7931 - val_loss: 0.5968 - val_accuracy: 0.7725\\n",\par
            "Epoch 12/30\\n",\par
            "180/180 [==============================] - 72s 401ms/step - loss: 0.5600 - accuracy: 0.7908 - val_loss: 0.6907 - val_accuracy: 0.7612\\n",\par
            "Epoch 13/30\\n",\par
            "180/180 [==============================] - 72s 399ms/step - loss: 0.5064 - accuracy: 0.8138 - val_loss: 0.5185 - val_accuracy: 0.8117\\n",\par
            "Epoch 14/30\\n",\par
            "180/180 [==============================] - 71s 394ms/step - loss: 0.4830 - accuracy: 0.8249 - val_loss: 0.3613 - val_accuracy: 0.8673\\n",\par
            "Epoch 15/30\\n",\par
            "180/180 [==============================] - 71s 397ms/step - loss: 0.4650 - accuracy: 0.8196 - val_loss: 0.3396 - val_accuracy: 0.8768\\n",\par
            "Epoch 16/30\\n",\par
            "180/180 [==============================] - 71s 393ms/step - loss: 0.4117 - accuracy: 0.8559 - val_loss: 0.3472 - val_accuracy: 0.8738\\n",\par
            "Epoch 17/30\\n",\par
            "180/180 [==============================] - 71s 397ms/step - loss: 0.3892 - accuracy: 0.8631 - val_loss: 0.3314 - val_accuracy: 0.8826\\n",\par
            "Epoch 18/30\\n",\par
            "180/180 [==============================] - 70s 389ms/step - loss: 0.3441 - accuracy: 0.8726 - val_loss: 0.4008 - val_accuracy: 0.8589\\n",\par
            "Epoch 19/30\\n",\par
            "180/180 [==============================] - 73s 404ms/step - loss: 0.3467 - accuracy: 0.8719 - val_loss: 0.2484 - val_accuracy: 0.9060\\n",\par
            "Epoch 20/30\\n",\par
            "180/180 [==============================] - 72s 398ms/step - loss: 0.3327 - accuracy: 0.8758 - val_loss: 0.2234 - val_accuracy: 0.9210\\n",\par
            "Epoch 21/30\\n",\par
            "180/180 [==============================] - 73s 403ms/step - loss: 0.2807 - accuracy: 0.9009 - val_loss: 0.2830 - val_accuracy: 0.9036\\n",\par
            "Epoch 22/30\\n",\par
            "180/180 [==============================] - 70s 392ms/step - loss: 0.2751 - accuracy: 0.9013 - val_loss: 0.2392 - val_accuracy: 0.9141\\n",\par
            "Epoch 23/30\\n",\par
            "180/180 [==============================] - 73s 404ms/step - loss: 0.2549 - accuracy: 0.9097 - val_loss: 0.2221 - val_accuracy: 0.9189\\n",\par
            "Epoch 24/30\\n",\par
            "180/180 [==============================] - 72s 399ms/step - loss: 0.2412 - accuracy: 0.9243 - val_loss: 0.2029 - val_accuracy: 0.9291\\n",\par
            "Epoch 25/30\\n",\par
            "180/180 [==============================] - 72s 402ms/step - loss: 0.2360 - accuracy: 0.9199 - val_loss: 0.1965 - val_accuracy: 0.9307\\n",\par
            "Epoch 26/30\\n",\par
            "180/180 [==============================] - 72s 401ms/step - loss: 0.2199 - accuracy: 0.9201 - val_loss: 0.1919 - val_accuracy: 0.9331\\n",\par
            "Epoch 27/30\\n",\par
            "180/180 [==============================] - 72s 400ms/step - loss: 0.2008 - accuracy: 0.9363 - val_loss: 0.1218 - val_accuracy: 0.9560\\n",\par
            "Epoch 28/30\\n",\par
            "180/180 [==============================] - 73s 406ms/step - loss: 0.1889 - accuracy: 0.9310 - val_loss: 0.2838 - val_accuracy: 0.9108\\n",\par
            "Epoch 29/30\\n",\par
            "180/180 [==============================] - 70s 389ms/step - loss: 0.2046 - accuracy: 0.9275 - val_loss: 0.2116 - val_accuracy: 0.9307\\n",\par
            "Epoch 30/30\\n",\par
            "180/180 [==============================] - 70s 392ms/step - loss: 0.1886 - accuracy: 0.9372 - val_loss: 0.2091 - val_accuracy: 0.9280\\n"\par
          ]\par
        \},\par
        \{\par
          "output_type": "execute_result",\par
          "data": \{\par
            "text/plain": [\par
              "<keras.callbacks.History at 0x7f3e15438e50>"\par
            ]\par
          \},\par
          "metadata": \{\},\par
          "execution_count": 20\par
        \}\par
      ]\par
    \},\par
    \{\par
      "cell_type": "markdown",\par
      "source": [\par
        "# **Step -6 Save The model**"\par
      ],\par
      "metadata": \{\par
        "id": "1uK880jw9Kru"\par
      \}\par
    \},\par
    \{\par
      "cell_type": "code",\par
      "source": [\par
        "model.save('Flowers_classification_model1.h5')"\par
      ],\par
      "metadata": \{\par
        "id": "scoaKurE9FZk"\par
      \},\par
      "execution_count": 21,\par
      "outputs": []\par
    \},\par
    \{\par
      "cell_type": "markdown",\par
      "source": [\par
        "# **Step -7 Test The model**"\par
      ],\par
      "metadata": \{\par
        "id": "YAH2UVpi9RMV"\par
      \}\par
    \},\par
    \{\par
      "cell_type": "code",\par
      "source": [\par
        "ls"\par
      ],\par
      "metadata": \{\par
        "colab": \{\par
          "base_uri": "{{\field{\*\fldinst{HYPERLINK https://localhost:8080/ }}{\fldrslt{https://localhost:8080/\ul0\cf0}}}}\f0\fs22 "\par
        \},\par
        "id": "Z-co6hBAEmzg",\par
        "outputId": "bf8a661d-3210-4695-dcb7-48e6f365dfce"\par
      \},\par
      "execution_count": 22,\par
      "outputs": [\par
        \{\par
          "output_type": "stream",\par
          "name": "stdout",\par
          "text": [\par
            "\\u001b[0m\\u001b[01;34mflowers\\u001b[0m/  Flowers_classification_model1.h5  Flowers-Dataset.zip  video.mp4\\n"\par
          ]\par
        \}\par
      ]\par
    \},\par
    \{\par
      "cell_type": "code",\par
      "source": [\par
        "import numpy as np\\n",\par
        "from tensorflow.keras.models import load_model\\n",\par
        "from tensorflow.keras.preprocessing import image"\par
      ],\par
      "metadata": \{\par
        "id": "mJvRRo7VvkeO"\par
      \},\par
      "execution_count": 23,\par
      "outputs": []\par
    \},\par
    \{\par
      "cell_type": "code",\par
      "source": [\par
        "# Load the model\\n",\par
        "model=load_model('Flowers_classification_model1.h5')"\par
      ],\par
      "metadata": \{\par
        "id": "xo6F_4jw9KBZ"\par
      \},\par
      "execution_count": 24,\par
      "outputs": []\par
    \},\par
    \{\par
      "cell_type": "code",\par
      "source": [\par
        "img=image.load_img(r\\"/content/s3.jpg\\",target_size=(64,64))\\n",\par
        "x=image.img_to_array(img)\\n",\par
        "x=np.expand_dims(x,axis=0)\\n",\par
        "y=np.argmax(model.predict(x),axis=1)\\n",\par
        "# x_train.class_indices\\n",\par
        "index=['daisy','dandelion','rose','sunflower','tulip']\\n",\par
        "index[y[0]]"\par
      ],\par
      "metadata": \{\par
        "colab": \{\par
          "base_uri": "{{\field{\*\fldinst{HYPERLINK https://localhost:8080/ }}{\fldrslt{https://localhost:8080/\ul0\cf0}}}}\f0\fs22 ",\par
          "height": 35\par
        \},\par
        "id": "2rnrfMAf-AB9",\par
        "outputId": "c6357a8b-5163-4884-c82e-05651a65571c"\par
      \},\par
      "execution_count": 38,\par
      "outputs": [\par
        \{\par
          "output_type": "execute_result",\par
          "data": \{\par
            "text/plain": [\par
              "'sunflower'"\par
            ],\par
            "application/vnd.google.colaboratory.intrinsic+json": \{\par
              "type": "string"\par
            \}\par
          \},\par
          "metadata": \{\},\par
          "execution_count": 38\par
        \}\par
      ]\par
    \},\par
    \{\par
      "cell_type": "markdown",\par
      "source": [\par
        "# **We Achieved 93 percent of accuracy with this model** \\n",\par
        "# **Trained by Team ID : PNT2022TMID17050**"\par
      ],\par
      "metadata": \{\par
        "id": "2f85wU8fL0Si"\par
      \}\par
    \}\par
  ]\par
\}\par
}
 